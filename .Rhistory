#Load the .csv data
Resturant="https://data.cityofnewyork.us/resource/qcdj-rwhu.csv"
Resturant<-read.csv(Resturant, header=TRUE,stringsAsFactors=F)
Resturant
head(Resturant)
str(Resturant)
# Business licenses are divided into active and inactive, so I think we should classify both and study only the active business restaurants.
activeR=subset(Resturant,Resturant$lic_status=="Active") #Table of active license Restaurant
inactiveR=subset(Resturant,Resturant$lic_status=="Inactive") #Table of inactive license Restaurant
# City Distribution
city=aggregate(Resturant[,c(1)], by=list(Resturant$city), length) #Showing the frequency of restaurant in each city
names(city)[names(city) == "x"] <- "number"
pie(city$number, labels = city$number, main="City distribution") #Showing the Pie chart of city distribution
#Map display
locations=aggregate(list(count=Resturant$swc_sq_ft), list(lat=Resturant$latitude, lon=Resturant$longitude, place=Resturant$zip),FUN=sum) #aggregate the geo location
library(ggmap)
library(gdtools)
library(fs)
library(sf)
library(mapview)
register_google(key = "AIzaSyAKl-9k7zIBHgqXRExg6XCeEuxf5BmdazY") #using google API
locations_sf <- st_as_sf(locations, coords = c("lon", "lat"), crs = 4326)
mapview(locations_sf) #showing map
View(activeR)
View(activeR)
View(Resturant)
View(Resturant)
View(locations)
View(locations)
View(Resturant)
View(Resturant)
#Load the .csv data
Restaurant="https://data.cityofnewyork.us/resource/qcdj-rwhu.csv"
Restaurant<-read.csv(Restaurant, header=TRUE,stringsAsFactors=F)
Restaurant
head(Restaurant)
str(Restaurant)
# Business licenses are divided into active and inactive, so I think we should classify both and study only the active business restaurants.
activeR=subset(Restaurant,Restaurant$lic_status=="Active") #Table of active license Restaurant
inactiveR=subset(Restaurant,Restaurant$lic_status=="Inactive") #Table of inactive license Restaurant
# City Distribution
city=aggregate(Restaurant[,c(1)], by=list(Restaurant$city), length) #Showing the frequency of restaurant in each city
names(city)[names(city) == "x"] <- "number"
pie(city$number, labels = city$number, main="City distribution") #Showing the Pie chart of city distribution
#Map display
locations=aggregate(list(count=Restaurant$swc_sq_ft), list(lat=Restaurant$latitude, lon=Restaurant$longitude, place=Restaurant$zip),FUN=sum) #aggregate the geo location
library(ggmap)
library(gdtools)
library(fs)
library(sf)
library(mapview)
register_google(key = "AIzaSyAKl-9k7zIBHgqXRExg6XCeEuxf5BmdazY") #using google API
locations_sf <- st_as_sf(locations, coords = c("lon", "lat"), crs = 4326)
mapview(locations_sf) #showing map
TotalEnclosed=aggregate(Restaurant[,c(1), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=count]
TotalEnclosed=aggregate(Restaurant[,c(1)], by=list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=count]
TotalEnclosed=aggregate(Restaurant[,c(1)], by=list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=count]
TotalEnclosed=aggregate(Restaurant[,c(1)], by=list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=count]
TotalEnclosed=aggregate(Restaurant[,c(1)], by=list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=count)
TotalEnclosed=aggregate(Restaurant[,c(1)], by=list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=sum)
TotalEnclosed=aggregate(Restaurant[,c(1)], by=list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), sum)
TotalEnclosed=aggregate(list(id=Restaurant$license_nbr), by=list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), sum)
TotalEnclosed=aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), sum)
TotalEnclosed=aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), Fun=sum)
#Map display
locations=aggregate(list(count=Restaurant$swc_sq_ft), list(lat=Restaurant$latitude, lon=Restaurant$longitude, place=Restaurant$zip),FUN=sum) #aggregate the geo location
TotalEnclosed=aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=sum)
TotalEnclosed<-aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=sum)
TotalEnclosed<-aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=length)
View(TotalEnclosed)
View(TotalEnclosed)
TotalEnclosed<-aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=sum())
TotalEnclosed<-aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=sum())
TotalEnclosed<-aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=sum
TotalEnclosed<-aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=sum)
TotalEnclosed<-aggregate(list(id=Restaurant$license_nbr), list(type=Restaurant$app_swc_type, Location=Restaurant$city, zip=Restaurant$zip), FUN=sum)
library(chron)
View(city)
View(city)
time=chron(Restaurant$app_status_date)
timeIn=as.Date(Restaurant$app_status_date)
timeIn
Restaurant$app_status_date=as.Date(Restaurant$app_status_date)
TimeDifference=aggregate(Restaurant[,c(1)], by=list(Restaurant$app_status, FUN=difftime(as.Date(Restaurant$submit_date),as.Date(Restaurant$app_status_date),units = "days"))
TimeDifference=aggregate(Restaurant[,c(1)], by=list(Restaurant$app_status, FUN=difftime(as.Date(Restaurant$submit_date),as.Date(Restaurant$app_status_date),units = "days"))
TimeDifference=aggregate(Restaurant[,c(1)], by=list(Restaurant$app_status), FUN=difftime(as.Date(Restaurant$submit_date),as.Date(Restaurant$app_status_date),units = "days"))
difftime(as.Date(Restaurant$submit_date),as.Date(Restaurant$app_status_date),units = "days")
difftime(as.Date(Restaurant$app_status_date),as.Date(Restaurant$submit_date),units = "days")
TimeDifference=aggregate(Restaurant[,c(1)], by=list(Restaurant$app_status), FUN=difftime(as.Date(Restaurant$app_status_date),as.Date(Restaurant$submit_date),units = "days"))
TimeDifference=aggregate(Restaurant[,c(1)], by=list(Restaurant$app_status), FUN=function(x) {difftime(as.Date(Restaurant$app_status_date),as.Date(Restaurant$submit_date),units = "days")})
View(TimeDifference)
View(TimeDifference)
ApplicationDuration <- function(submitTime, statusTime){
TimeDiff <- difftime(as.Date(statusTime),as.Date(submitTime),units = "days")
return(TimeDiff)
}
TimeDifference=aggregate(Restaurant[,c(1)], by=list(Restaurant$app_status), FUN=ApplicationDuration(Restaurant$submit_date,Restaurant$app))
TimeDifference=aggregate(Restaurant[,c(1)], by=list(Restaurant$app_status), FUN=ApplicationDuration(Restaurant$submit_date,Restaurant$app){})
TimeDifference=aggregate(Restaurant[,c(1)], by=list(Restaurant$app_status), FUN=function(Restaurant$submit_date,Restaurant$app) ApplicationDuration(Restaurant$submit_date,Restaurant$app){})
cbind(Restaurant,|ApplicationTime=difftime(as.Date(Restaurant$app_status_date),as.Date(Restaurant$submit_date),units = "days"))
cbind(Restaurant,ApplicationTime=difftime(as.Date(Restaurant$app_status_date),as.Date(Restaurant$submit_date),units = "days"))
View(Restaurant)
View(Restaurant)
Restaurant<-cbind(Restaurant,ApplicationTime=difftime(as.Date(Restaurant$app_status_date),as.Date(Restaurant$submit_date),units = "days"))
Restaurant<-cbind(Restaurant,ApplicationTime=difftime(as.Date(Restaurant$app_status_date),as.Date(Restaurant$submit_date),units = "days")) # Checks for a difference in time betwen submission date and app status
#Load the .csv data
Restaurant="https://data.cityofnewyork.us/resource/qcdj-rwhu.csv"
Restaurant<-read.csv(Restaurant, header=TRUE,stringsAsFactors=F)
Restaurant
head(Restaurant)
str(Restaurant)
# Business licenses are divided into active and inactive, so I think we should classify both and study only the active business restaurants.
activeR=subset(Restaurant,Restaurant$lic_status=="Active") #Table of active license Restaurant
inactiveR=subset(Restaurant,Restaurant$lic_status=="Inactive") #Table of inactive license Restaurant
# City Distribution
city=aggregate(Restaurant[,c(1)], by=list(Restaurant$city), length) #Showing the frequency of restaurant in each city
names(city)[names(city) == "x"] <- "number"
pie(city$number, labels = city$number, main="City distribution") #Showing the Pie chart of city distribution
#Map display
locations=aggregate(list(count=Restaurant$swc_sq_ft), list(lat=Restaurant$latitude, lon=Restaurant$longitude, place=Restaurant$zip),FUN=sum) #aggregate the geo location
library(ggmap)
library(gdtools)
library(fs)
library(sf)
library(mapview)
register_google(key = "AIzaSyAKl-9k7zIBHgqXRExg6XCeEuxf5BmdazY") #using google API
locations_sf <- st_as_sf(locations, coords = c("lon", "lat"), crs = 4326)
mapview(locations_sf) #showing map
Restaurant$app_status_date=as.Date(Restaurant$app_status_date)
ApplicationDuration <- function(submitTime, statusTime){
TimeDiff <- difftime(as.Date(statusTime),as.Date(submitTime),units = "days")
return(TimeDiff)
}
Restaurant<-cbind(Restaurant,ApplicationTime=difftime(as.Date(Restaurant$app_status_date),as.Date(Restaurant$submit_date),units = "days")) # Checks for a difference in time betwen submission date and app status
